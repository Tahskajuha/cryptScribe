{
  "version": 3,
  "sources": ["vite:dep-pre-bundle:external-conversion:/home/akshat/Projects/webJournal/node_modules/argon2-browser/dist/argon2.wasm", "../../argon2-browser/lib/argon2.js"],
  "sourcesContent": ["export { default } from \"vite-dep-pre-bundle-external:/home/akshat/Projects/webJournal/node_modules/argon2-browser/dist/argon2.wasm\";export * from \"vite-dep-pre-bundle-external:/home/akshat/Projects/webJournal/node_modules/argon2-browser/dist/argon2.wasm\";", "(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.argon2 = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function () {\n    const global = typeof self !== 'undefined' ? self : this;\n\n    /**\n     * @enum\n     */\n    const ArgonType = {\n        Argon2d: 0,\n        Argon2i: 1,\n        Argon2id: 2,\n    };\n\n    function loadModule(mem) {\n        if (loadModule._promise) {\n            return loadModule._promise;\n        }\n        if (loadModule._module) {\n            return Promise.resolve(loadModule._module);\n        }\n        let promise;\n        if (\n            global.process &&\n            global.process.versions &&\n            global.process.versions.node\n        ) {\n            promise = loadWasmModule().then(\n                (Module) =>\n                    new Promise((resolve) => {\n                        Module.postRun = () => resolve(Module);\n                    })\n            );\n        } else {\n            promise = loadWasmBinary().then((wasmBinary) => {\n                const wasmMemory = mem ? createWasmMemory(mem) : undefined;\n                return initWasm(wasmBinary, wasmMemory);\n            });\n        }\n        loadModule._promise = promise;\n        return promise.then((Module) => {\n            loadModule._module = Module;\n            delete loadModule._promise;\n            return Module;\n        });\n    }\n\n    function initWasm(wasmBinary, wasmMemory) {\n        return new Promise((resolve) => {\n            global.Module = {\n                wasmBinary,\n                wasmMemory,\n                postRun() {\n                    resolve(Module);\n                },\n            };\n            return loadWasmModule();\n        });\n    }\n\n    function loadWasmModule() {\n        if (global.loadArgon2WasmModule) {\n            return global.loadArgon2WasmModule();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.js'));\n        }\n        return import('../dist/argon2.js');\n    }\n\n    function loadWasmBinary() {\n        if (global.loadArgon2WasmBinary) {\n            return global.loadArgon2WasmBinary();\n        }\n        if (typeof require === 'function') {\n            return Promise.resolve(require('../dist/argon2.wasm')).then(\n                (wasmModule) => {\n                    return decodeWasmBinary(wasmModule);\n                }\n            );\n        }\n        const wasmPath =\n            global.argon2WasmPath ||\n            'node_modules/argon2-browser/dist/argon2.wasm';\n        return fetch(wasmPath)\n            .then((response) => response.arrayBuffer())\n            .then((ab) => new Uint8Array(ab));\n    }\n\n    function decodeWasmBinary(base64) {\n        const text = atob(base64);\n        const binary = new Uint8Array(new ArrayBuffer(text.length));\n        for (let i = 0; i < text.length; i++) {\n            binary[i] = text.charCodeAt(i);\n        }\n        return binary;\n    }\n\n    function createWasmMemory(mem) {\n        const KB = 1024;\n        const MB = 1024 * KB;\n        const GB = 1024 * MB;\n        const WASM_PAGE_SIZE = 64 * KB;\n\n        const totalMemory = (2 * GB - 64 * KB) / WASM_PAGE_SIZE;\n        const initialMemory = Math.min(\n            Math.max(Math.ceil((mem * KB) / WASM_PAGE_SIZE), 256) + 256,\n            totalMemory\n        );\n\n        return new WebAssembly.Memory({\n            initial: initialMemory,\n            maximum: totalMemory,\n        });\n    }\n\n    function allocateArray(Module, arr) {\n        return Module.allocate(arr, 'i8', Module.ALLOC_NORMAL);\n    }\n\n    function allocateArrayStr(Module, arr) {\n        const nullTerminatedArray = new Uint8Array([...arr, 0]);\n        return allocateArray(Module, nullTerminatedArray);\n    }\n\n    function encodeUtf8(str) {\n        if (typeof str !== 'string') {\n            return str;\n        }\n        if (typeof TextEncoder === 'function') {\n            return new TextEncoder().encode(str);\n        } else if (typeof Buffer === 'function') {\n            return Buffer.from(str);\n        } else {\n            throw new Error(\"Don't know how to encode UTF8\");\n        }\n    }\n\n    /**\n     * Argon2 hash\n     * @param {string|Uint8Array} params.pass - password string\n     * @param {string|Uint8Array} params.salt - salt string\n     * @param {number} [params.time=1] - the number of iterations\n     * @param {number} [params.mem=1024] - used memory, in KiB\n     * @param {number} [params.hashLen=24] - desired hash length\n     * @param {number} [params.parallelism=1] - desired parallelism\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @return Promise\n     *\n     * @example\n     *  argon2.hash({ pass: 'password', salt: 'somesalt' })\n     *      .then(h => console.log(h.hash, h.hashHex, h.encoded))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Hash(params) {\n        const mCost = params.mem || 1024;\n        return loadModule(mCost).then((Module) => {\n            const tCost = params.time || 1;\n            const parallelism = params.parallelism || 1;\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const saltEncoded = encodeUtf8(params.salt);\n            const salt = allocateArrayStr(Module, saltEncoded);\n            const saltlen = saltEncoded.length;\n            const argon2Type = params.type || ArgonType.Argon2d;\n            const hash = Module.allocate(\n                new Array(params.hashLen || 24),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const hashlen = params.hashLen || 24;\n            const encodedlen = Module._argon2_encodedlen(\n                tCost,\n                mCost,\n                parallelism,\n                saltlen,\n                hashlen,\n                argon2Type\n            );\n            const encoded = Module.allocate(\n                new Array(encodedlen + 1),\n                'i8',\n                Module.ALLOC_NORMAL\n            );\n            const version = 0x13;\n            let err;\n            let res;\n            try {\n                res = Module._argon2_hash_ext(\n                    tCost,\n                    mCost,\n                    parallelism,\n                    pwd,\n                    pwdlen,\n                    salt,\n                    saltlen,\n                    hash,\n                    hashlen,\n                    encoded,\n                    encodedlen,\n                    argon2Type,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    version\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res === 0 && !err) {\n                let hashStr = '';\n                const hashArr = new Uint8Array(hashlen);\n                for (let i = 0; i < hashlen; i++) {\n                    const byte = Module.HEAP8[hash + i];\n                    hashArr[i] = byte;\n                    hashStr += ('0' + (0xff & byte).toString(16)).slice(-2);\n                }\n                const encodedStr = Module.UTF8ToString(encoded);\n                result = {\n                    hash: hashArr,\n                    hashHex: hashStr,\n                    encoded: encodedStr,\n                };\n            } else {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(salt);\n                Module._free(hash);\n                Module._free(encoded);\n                if (ad) {\n                    Module._free(ad);\n                }\n                if (secret) {\n                    Module._free(secret);\n                }\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    /**\n     * Argon2 verify function\n     * @param {string} params.pass - password string\n     * @param {string|Uint8Array} params.encoded - encoded hash\n     * @param {number} [params.type=argon2.ArgonType.Argon2d] - hash type:\n     *      argon2.ArgonType.Argon2d\n     *      argon2.ArgonType.Argon2i\n     *      argon2.ArgonType.Argon2id\n     *\n     * @returns Promise\n     *\n     * @example\n     *  argon2.verify({ pass: 'password', encoded: 'encoded-hash' })\n     *      .then(() => console.log('OK'))\n     *      .catch(e => console.error(e.message, e.code))\n     */\n    function argon2Verify(params) {\n        return loadModule().then((Module) => {\n            const pwdEncoded = encodeUtf8(params.pass);\n            const pwd = allocateArrayStr(Module, pwdEncoded);\n            const pwdlen = pwdEncoded.length;\n            const secret = params.secret\n                ? allocateArray(Module, params.secret)\n                : 0;\n            const secretlen = params.secret ? params.secret.byteLength : 0;\n            const ad = params.ad ? allocateArray(Module, params.ad) : 0;\n            const adlen = params.ad ? params.ad.byteLength : 0;\n            const encEncoded = encodeUtf8(params.encoded);\n            const enc = allocateArrayStr(Module, encEncoded);\n            let argon2Type = params.type;\n            if (argon2Type === undefined) {\n                let typeStr = params.encoded.split('$')[1];\n                if (typeStr) {\n                    typeStr = typeStr.replace('a', 'A');\n                    argon2Type = ArgonType[typeStr] || ArgonType.Argon2d;\n                }\n            }\n            let err;\n            let res;\n            try {\n                res = Module._argon2_verify_ext(\n                    enc,\n                    pwd,\n                    pwdlen,\n                    secret,\n                    secretlen,\n                    ad,\n                    adlen,\n                    argon2Type\n                );\n            } catch (e) {\n                err = e;\n            }\n            let result;\n            if (res || err) {\n                try {\n                    if (!err) {\n                        err = Module.UTF8ToString(\n                            Module._argon2_error_message(res)\n                        );\n                    }\n                } catch (e) {}\n                result = { message: err, code: res };\n            }\n            try {\n                Module._free(pwd);\n                Module._free(enc);\n            } catch (e) {}\n            if (err) {\n                throw result;\n            } else {\n                return result;\n            }\n        });\n    }\n\n    function unloadRuntime() {\n        if (loadModule._module) {\n            loadModule._module.unloadRuntime();\n            delete loadModule._promise;\n            delete loadModule._module;\n        }\n    }\n\n    return {\n        ArgonType,\n        hash: argon2Hash,\n        verify: argon2Verify,\n        unloadRuntime,\n    };\n});\n"],
  "mappings": "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",
  "names": ["default", "require_argon2", "Module"]
}
